/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2020 Charles Benedict

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************/

/******************************************************************************
  Ben Eaters Breadboard Computer, Implemented In an FPGA
   
  Test out clock module on a breadboard.
   
   Requirements:
     - Alchitry Au Board
     - Alchitry Br Board
     - V1.2.4 Alchitry Labs IDE
  
   *****************************************************************************/

module au_top (
    input clk,                          // 100MHz clock
    input rst_n,                        // reset button (active low)
    output led [8],                     // 8 user controllable LEDs
    input usb_rx,                       // USB->Serial input
    output usb_tx,                      // USB->Serial output
    output io_led [3][8],               // LEDs on IO Shield
    output io_seg [8],                  // 7-segment LEDs on IO Shield
    output io_sel [4],                  // Digit select on IO Shield
    input io_button [5],                // 5 buttons on IO Shield
    input io_dip [3][8]                 // DIP switches on IO Shield
  ) {
  
  sig rst;                          // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
        
    .rst(rst) {
      clock_digital_fs clock;       // The clock module that we are testing
    }
  }

  .rst(rst) {
    d_register_3state_out reg;
  }
    
  always {
    // Boilerplate initialization code for base Au
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    // Boilerplate init for Br
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits               
    
    // Wire up the clock input signals      
    clock.halt = 0;                                    // Default do not halt
    clock.advance = io_button[1];                     // Wire up manual clock advance button 
    clock.auto_manualb = io_dip[0][0];                 // Wire up auto/manual clock switch
    clock.faster = io_button[0];                       // Wire up speed up auto clock button
    clock.slower = io_button[2];                       // Wire up slow down auto clock button

    // Assign the clock pulse indicator to an LED    
    io_led[0][0] = clock.clock_indicator;
    
    // Wire up the d_register input signals
    reg.d = io_dip[1][0];
    reg.g1b = io_dip[1][1];
    reg.g2b = io_dip[1][2];
    reg.m = io_dip[1][3];
    reg.n = io_dip[1][4];
    reg.clk = clock.out;
    
    // Assign d_register output
    io_led[1][0] = reg.q;
  }
}