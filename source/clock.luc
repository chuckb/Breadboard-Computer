/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2020 Charles Benedict

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************/

/******************************************************************************
  Ben Eaters Breadboard Computer, Implemented In an FPGA
   
  This clock module implements the auto/manual advance clock as illustrated
  by Ben Eater's Breadboard Computer project.  
   *****************************************************************************/

module clock (
    input clk,            // an input clock signal
    input rst,            // global reset
    output out,           // our clock module's output signal
    output outb,          // inverted output signal
    input period[29],     // period to delay clock
    input auto_manualb,   // high if clock should free run, or low for manual step
    input halt,           // halts the clock
    input advance         // manual clock advance of one tick
  ) {

  sig clock_state;        // holds the current state of the clock (high/low)
  
  .clk(clk) {
    .rst(rst) {
      dff ctr[29];          // enough bits for 5 second free running pulse @ 100 Mhz
      dff scaled_clock;     // hold the current state of the scaled down auto clock pulse
    }
    // edge detects when the advance signal is raised
    edge_detector advanced (#RISE(1), #FALL(0));
   }
  
  always {
    // Define the clock state based on signals defined within clock schematic
    clock_state = ~halt & ((auto_manualb & scaled_clock.q) | (~auto_manualb & advanced.out));
    
    // Set out the clock output signals based on internal clock state
    out = clock_state;
    outb = ~clock_state;

    // Advance interal counter
    ctr.d = ctr.q + 1;
    
    // Assign edge detector to advance input signal
    advanced.in = advance;

    // Cap the internal counter based on desired period
    if (ctr.q == period) {
      ctr.d = 0;
      // Flip the scaled clock state
      scaled_clock.d = ~scaled_clock.q;
    }    
  }
}
