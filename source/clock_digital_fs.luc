/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2020 Charles Benedict

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************/

/******************************************************************************
  Ben Eaters Breadboard Computer, Implemented In an FPGA
   
  Implement a digital faster/slower button interface for clock speed control.
  Pass the rest of the control signals to the underlying clock module.
   
  *****************************************************************************/

module clock_digital_fs (
    input clk,              // clock
    input rst,              // reset
    output out,             // our clock module's output signal
    output outb,            // inverted output signal
    output clock_indicator, // signal to give visual feedback of clock state
    input auto_manualb,     // high if clock should free run, or low for manual step
    input halt,             // halts the clock
    input advance,          // manual clock advance of one tick
    input faster,           // speeds up the auto clock
    input slower            // slows down the auto clock
  ) {

  .clk(clk) {
    // Debouncer and edge detector for the faster clock button
    button_conditioner faster_conditioner;
    edge_detector faster_edge (#RISE(1), #FALL(0));

    // Debouncer and edge detector for the slower clock button
    button_conditioner slower_conditioner;
    edge_detector slower_edge (#RISE(1), #FALL(0));    
    .rst(rst) {
      // The clock module we are wrapping up
      clock clock;
      // DFF to store state of current clock period scaler
      // Provide a default value for our clock period (about 0.16 seconds)
      dff current_period[29] (#INIT(1 << 24));              
    }
  }
  
  always {
    // Pass signals through to underlying clock (inheritance would be cool)
    out = clock.out;
    outb = clock.outb;
    clock_indicator = clock.clock_indicator;
    clock.auto_manualb = auto_manualb;
    clock.halt = halt;
    clock.advance = advance;

    // Assign faster/slower clock inputs their conditioners and edge detectors
    faster_conditioner.in = faster;
    slower_conditioner.in = slower;
    faster_edge.in = faster_conditioner.out;
    slower_edge.in = slower_conditioner.out;
    
    // Bit shift right if clock is to go faster (but don't roll off end)
    if (faster_edge.out & ~current_period.q[0]) {
      current_period.d = current_period.q >> 1;
    }

    // Bit shift left if clock is to go slower (but don't overflow)
    if (slower_edge.out & ~current_period.q[28]) {
      current_period.d = current_period.q << 1;
    }
    
    // Set up one clock period from current_period setting
    clock.period = current_period.q;
  }
}
